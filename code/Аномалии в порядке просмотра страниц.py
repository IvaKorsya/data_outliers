# -*- coding: utf-8 -*-
"""Copy of PageViewOrderNumber.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/194jEn_ItM3ABTpn1LS4u-zgmE6HIs7QT
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def load_and_preprocess_data(file_path):
    """
    Загружает данные из файла и выполняет предварительную обработку:
    - Удаление записей с ua_is_bot = 1
    - Удаление дубликатов

    Параметры:
    file_path (str): Путь к файлу с данными

    Возвращает:
    pd.DataFrame: Обработанный DataFrame
    """
    try:
        # Загрузка данных
        df = pd.read_parquet(file_path)
        print(f"Файл {file_path} успешно прочитан! Количество строк: {len(df)}")

        # Создаем временный DataFrame для обнаружения дубликатов
        temp_df = df.copy()

        # Преобразуем массивы в строки для корректного сравнения
        for col in temp_df.columns:
            if isinstance(temp_df[col].iloc[0], (np.ndarray, list)):
                temp_df[col] = temp_df[col].apply(lambda x: str(x))

        # Удаляем дубликаты
        new_df = df.loc[temp_df.drop_duplicates().index]
        print(f"Количество строк после удаления дубликатов: {len(new_df)}")

        # Фильтрация: удаляем ботов (где ua_is_bot != 1)
        new_df = new_df[(new_df['ua_is_bot'] != 1)]
        print(f"Количество строк после удаления ботов: {len(new_df)}")

        return new_df

    except Exception as e:
        print(f"Ошибка при обработке файла: {e}")
        return None

def detect_page_number_anomalies(df, user_id_column='randPAS_user_agent_id', session_id_column='randPAS_session_id'):
    """
    Находит аномалии в нумерации page_view_order_number:
    - reset: текущий номер < предыдущего (например, 3 → 1),
    - skip: текущий номер > предыдущего + 1 (например, 2 → 4),
    - delta (разница между current и previous)

    Параметры:
    df (pd.DataFrame): DataFrame с данными
    user_id_column (str): Название колонки с ID пользователя
    session_id_column (str): Название колонки с ID сессии

    Возвращает:
    pd.DataFrame: DataFrame с аномалиями
    """
    anomalies = []

    if 'page_view_order_number' in df.columns:
        df['page_view_order_number'] = df['page_view_order_number'].astype('int64')

    for (user_id, session_id), group in df.groupby([user_id_column, session_id_column]):
        page_numbers = group['page_view_order_number'].values

        for i in range(1, len(page_numbers)):
            prev_num = page_numbers[i-1]
            current_num = page_numbers[i]
            delta = current_num - prev_num

            if current_num < prev_num:
                anomalies.append({
                    'user_id': user_id,
                    'session_id': session_id,
                    'event_index': i,
                    'page_view_order_number': current_num,
                    'previous_number': prev_num,
                    'delta': delta,
                    'anomaly_type': 'reset'
                })

            elif delta > 1:
                anomalies.append({
                    'user_id': user_id,
                    'session_id': session_id,
                    'event_index': i,
                    'page_view_order_number': current_num,
                    'previous_number': prev_num,
                    'delta': delta,
                    'anomaly_type': 'skip',
                })

    return pd.DataFrame(anomalies)

def visualize_anomalies(anomalies_df, total_records):
    """
    Создает визуализации для анализа аномалий:
    1. Круговую диаграмму распределения типов аномалий
    2. Соотношение нормальных и аномальных записей

    Параметры:
    anomalies_df (pd.DataFrame): DataFrame с аномалиями
    total_records (int): Общее количество записей для расчета соотношения
    """
    # 1. Круговая диаграмма распределения типов аномалий
    anomaly_counts = anomalies_df["anomaly_type"].value_counts()
    total_anomalies = sum(anomaly_counts)
    percentages = [f'{(count/total_anomalies)*100:.1f}%' for count in anomaly_counts]

    legend_labels = [f"{label} ({pct})" for label, pct in zip(anomaly_counts.index, percentages)]

    plt.figure(figsize=(12, 6))

    # Первый график - распределение типов аномалий
    plt.subplot(1, 2, 1)
    patches = plt.pie(
        anomaly_counts,
        labels=None,
        colors=["#4ECDC4", "#FFD166"],
        startangle=90,
        pctdistance=0.8
    )[0]

    plt.title("Распределение типов аномалий")
    plt.legend(
        patches,
        legend_labels,
        title="Типы аномалий",
        loc="center left",
        bbox_to_anchor=(1, 0.5),
        frameon=False
    )

    # 2. Соотношение нормальных и аномальных записей
    plt.subplot(1, 2, 2)
    normal_records = total_records - len(anomalies_df)
    labels = ['Нормальные', 'Аномальные']
    sizes = [normal_records, len(anomalies_df)]
    colors = ['#66b3ff', '#ff9999']
    patches = plt.pie(
        sizes,
        colors=["#4ECDC4", "#FFD166"],
        startangle=90,
        pctdistance=0.8
    )[0]

    plt.legend(
        patches,
        labels,
        title="Тип данных",
        loc="center left",
        bbox_to_anchor=(1, 0.5),
        frameon=False
    )

    plt.title("Соотношение нормальных и аномальных записей")
    plt.axis('equal')

    plt.tight_layout()
    plt.show()