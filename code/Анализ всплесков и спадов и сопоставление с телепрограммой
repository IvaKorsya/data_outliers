import pandas as pd
import numpy as np
import glob
import matplotlib.pyplot as plt
from scipy.signal import argrelextrema
import os
from google.colab import drive


def analyze_data(dataset_path, schedule_file):

    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–∞—Ä–∫–µ—Ç-—Ñ–∞–π–ª—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
    all_files = glob.glob(dataset_path)
    if not all_files:
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏: {dataset_path}")
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã) —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π (—Ç–æ–ª—å–∫–æ `page_view`)
    chunks = []
    for f in all_files:
        chunk = pd.read_parquet(f, columns=['event', 'ts'])
        chunk = chunk[chunk['event'] == 'page_view']
        chunks.append(chunk)

    data = pd.concat(chunks)
    del chunks  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å

    # 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º `ts` –≤ datetime –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∏–Ω—É—Ç–∞–º
    data['ts'] = pd.to_datetime(data['ts'])
    activity = data.groupby(data['ts'].dt.floor('min')).size().reset_index(name='requests')

    # 3. –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã (—Ç–æ–ø-10 –≤—Å–ø–ª–µ—Å–∫–æ–≤)
    activity['local_max'] = activity.iloc[argrelextrema(activity['requests'].values, np.greater, order=10)[0]]['requests']
    peaks = activity.nlargest(10, 'requests')

    # 4. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–ª–µ–ø—Ä–æ–≥—Ä–∞–º–º—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º `end_ts`
    if not os.path.exists(schedule_file):
        raise FileNotFoundError(f"–§–∞–π–ª —Ç–µ–ª–µ–ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {schedule_file}")
    schedule_df = pd.read_csv(schedule_file)
    schedule_df['start_ts'] = pd.to_datetime(schedule_df['start_ts'])
    schedule_df['end_ts'] = schedule_df['start_ts'] + pd.to_timedelta(schedule_df['dur'], unit='s')

    # 5. –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–ø–ª–µ—Å–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–∞–º–∏
    def find_show(timestamp):
        show = schedule_df[(schedule_df['start_ts'] <= timestamp) & (schedule_df['end_ts'] >= timestamp)]
        return show[['title', 'event_type', 'channel_id']].to_dict(orient='records')

    peaks['matched_shows'] = peaks['ts'].apply(find_show)

    def rating_programs(schedule_file, top_k=10):
      # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–ª–µ–ø—Ä–æ–≥—Ä–∞–º–º—É, –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø–æ–ª–µ 'event_type'
      if not os.path.exists(schedule_file):
          raise FileNotFoundError(f"–§–∞–π–ª —Ç–µ–ª–µ–ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {schedule_file}")
      cols = ['event_type']
      schedule_df = pd.read_csv(schedule_file, usecols = cols)

      # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ–¥–∞—á. –ö–∞–∫–∏—Ö –ø–µ—Ä–µ–¥–∞—á –±—ã–ª–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ-—Ç–µ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ.
      counts = schedule_df[schedule_df['event_type'] != '–ü—Ä–æ—á–µ–µ']['event_type'].value_counts()

      # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-k
      top = counts.head(top_k)
      print("\n–¢–æ–ø-10 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º:\n")
      print(top.to_string())
      return top

    top_k = 10; # —Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    top = rating_programs(schedule_file, top_k)

    # 6. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    plt.figure(figsize=(14, 6))
    plt.plot(activity['ts'], activity['requests'], label='–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã', color='blue', alpha=0.7)
    plt.scatter(peaks['ts'], peaks['requests'], color='red', label='–¢–æ–ø-10 –≤—Å–ø–ª–µ—Å–∫–æ–≤', zorder=3)
    plt.xlabel('–í—Ä–µ–º—è')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤')
    plt.title('–í—Å–ø–ª–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–¥–∞—á–∞–º')
    plt.legend()
    plt.xticks(rotation=45)
    plt.grid()
    plt.show()

    # 7. –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥
    print("\n=== –í—Å–ø–ª–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ ===\n")
    for index, row in peaks.iterrows():
        print(f"üìå –í—Ä–µ–º—è –≤—Å–ø–ª–µ—Å–∫–∞: {row['ts']}")
        print(f"   üî∫ –ó–∞–ø—Ä–æ—Å–æ–≤: {row['requests']}")
        if row['matched_shows']:

            found_top_show = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á

            for show in row['matched_shows']:
                if show['event_type'] in top:
                    print(f"   ‚úÖ –û–ø—Ä–∞–≤–¥–∞–Ω–Ω—ã–π –≤—Å–ø–ª–µ—Å–∫. –®–ª–∞ –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞: {show['title']} (–¢–∏–ø: {show['event_type']}, –ö–∞–Ω–∞–ª: {show['channel_id']})")
                    found_top_show = True
                    break

            if not found_top_show:
                print("   ‚ö†Ô∏è ATTENTION: –í—Å–ø–ª–µ—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–æ–ø–æ–≤—ã–º–∏ –ø–µ—Ä–µ–¥–∞—á–∞–º–∏")
                print("   –ü–µ—Ä–µ–¥–∞—á–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è:")
                for show in row['matched_shows']:
                    print(f"      - {show['title']} (–¢–∏–ø: {show['event_type']}, –ö–∞–Ω–∞–ª: {show['channel_id']})")
        else:
            print("   ‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Ç–µ–ª–µ–ø—Ä–æ–≥—Ä–∞–º–º–æ–π.")
        print("-" * 50)



# –ú–æ–Ω—Ç–∏—Ä—É–µ–º Google Drive –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
drive.mount('/content/drive')

# –ó–∞–ø—Ä–æ—Å –ø—É—Ç–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è Colab)
dataset_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞—Ä–∫–µ—Ç-—Ñ–∞–π–ª–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, /content/drive/MyDrive/dataset/*.parquet): ").strip()
schedule_file = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç–µ–ª–µ–ø—Ä–æ–≥—Ä–∞–º–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /content/drive/MyDrive/aggrs_tv_program_epg_plan.csv): ").strip()

# –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyze_data(dataset_path, schedule_file)
