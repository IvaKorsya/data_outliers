import pandas as pd
import numpy as np
import glob
import matplotlib.pyplot as plt
from scipy.signal import argrelextrema

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
dataset_path = '/content/drive/MyDrive/dataset/*.parquet'  # –í—Å–µ –ø–∞—Ä–∫–µ—Ç-—Ñ–∞–π–ª—ã
schedule_file = '/content/drive/MyDrive/aggrs_tv_program_epg_plan.csv'  # –¢–µ–ª–µ–ø—Ä–æ–≥—Ä–∞–º–º–∞

# 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–∞—Ä–∫–µ—Ç-—Ñ–∞–π–ª—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
all_files = glob.glob(dataset_path)
data = pd.concat([pd.read_parquet(f) for f in all_files])

# 2. –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ `page_view`
data = data[data['event'] == 'page_view']

# 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º `ts` –≤ datetime –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∏–Ω—É—Ç–∞–º
data['ts'] = pd.to_datetime(data['ts'])
activity = data.groupby(data['ts'].dt.floor('min')).size().reset_index(name='requests')

# 4. –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã (–≤—Å–ø–ª–µ—Å–∫–∏) –∏ –º–∏–Ω–∏–º—É–º—ã (—Å–ø–∞–¥—ã)
# –î–ª—è –º–∞–∫—Å–∏–º—É–º–æ–≤
max_indices = argrelextrema(activity['requests'].values, np.greater, order=10)[0]
activity['local_max'] = np.nan
activity.loc[max_indices, 'local_max'] = activity.loc[max_indices, 'requests']

# –î–ª—è –º–∏–Ω–∏–º—É–º–æ–≤
min_indices = argrelextrema(activity['requests'].values, np.less, order=10)[0]
activity['local_min'] = np.nan
activity.loc[min_indices, 'local_min'] = activity.loc[min_indices, 'requests']

# –¢–æ–ø-10 –≤—Å–ø–ª–µ—Å–∫–æ–≤ –∏ —Ç–æ–ø-10 —Å–ø–∞–¥–æ–≤
peaks = activity.nlargest(10, 'requests')
dips = activity.nsmallest(10, 'requests')

# 5. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–ª–µ–ø—Ä–æ–≥—Ä–∞–º–º—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º `end_ts`
schedule_df = pd.read_csv(schedule_file)
schedule_df['start_ts'] = pd.to_datetime(schedule_df['start_ts'])
schedule_df['end_ts'] = schedule_df['start_ts'] + pd.to_timedelta(schedule_df['dur'], unit='s')

# 6. –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–ø–ª–µ—Å–∫–∏ –∏ —Å–ø–∞–¥—ã —Å –ø–µ—Ä–µ–¥–∞—á–∞–º–∏
def find_show(timestamp):
    show = schedule_df[(schedule_df['start_ts'] <= timestamp) & (schedule_df['end_ts'] >= timestamp)]
    return show[['title', 'channel_id']].to_dict(orient='records')

peaks['matched_shows'] = peaks['ts'].apply(find_show)
dips['matched_shows'] = dips['ts'].apply(find_show)

# 7. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
plt.figure(figsize=(14, 8))
plt.plot(activity['ts'], activity['requests'], label='–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã', color='blue', alpha=0.7)
plt.scatter(peaks['ts'], peaks['requests'], color='red', label='–¢–æ–ø-10 –≤—Å–ø–ª–µ—Å–∫–æ–≤', zorder=3)
plt.scatter(dips['ts'], dips['requests'], color='green', label='–¢–æ–ø-10 —Å–ø–∞–¥–æ–≤', zorder=3)
plt.xlabel('–í—Ä–µ–º—è')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤')
plt.title('–í—Å–ø–ª–µ—Å–∫–∏ –∏ —Å–ø–∞–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ç–µ–ª–µ–ø—Ä–æ–≥—Ä–∞–º–º–µ')
plt.legend()
plt.xticks(rotation=45)
plt.grid()
plt.show()

# 8. –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥
print("\n=== –í—Å–ø–ª–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ ===\n")
for index, row in peaks.iterrows():
    print(f"üìå –í—Ä–µ–º—è –≤—Å–ø–ª–µ—Å–∫–∞: {row['ts']}")
    print(f"   üî∫ –ó–∞–ø—Ä–æ—Å–æ–≤: {row['requests']}")
    if row['matched_shows']:
        print("   üì∫ –ü–µ—Ä–µ–¥–∞—á–∏ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç:")
        for show in row['matched_shows']:
            print(f"      - {show['title']} (–ö–∞–Ω–∞–ª {show['channel_id']})")
    else:
        print("   ‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Ç–µ–ª–µ–ø—Ä–æ–≥—Ä–∞–º–º–æ–π.")
    print("-" * 50)

print("\n=== –°–ø–∞–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ ===\n")
for index, row in dips.iterrows():
    print(f"üìå –í—Ä–µ–º—è —Å–ø–∞–¥–∞: {row['ts']}")
    print(f"   üîª –ó–∞–ø—Ä–æ—Å–æ–≤: {row['requests']}")
    if row['matched_shows']:
        print("   üì∫ –ü–µ—Ä–µ–¥–∞—á–∏ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç:")
        for show in row['matched_shows']:
            print(f"      - {show['title']} (–ö–∞–Ω–∞–ª {show['channel_id']})")
    else:
        print("   ‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Ç–µ–ª–µ–ø—Ä–æ–≥—Ä–∞–º–º–æ–π.")
    print("-" * 50)
